This repository contains the scripts and data necessary to reproduce our training regime for ParsSNP and apply ParsSNP to new datasets. It will be much easier to use these tools within a Linux environment, since many software dependencies will already be installed (e.g. perl, file decompression, etc). 

There are six files available to demonstrate ParsSNP. Each is described in turn. 

1) ParsSNP_resources.Rdata
	This R workspace contains the pan-cancer data used in the study, as well as the final ParsSNP neural network and files needed to apply it:
	
	1) PanCan is the pan-cancer dataframe. Columns 1-24 are the fully scaled and imputed descriptors. The remaining columns indicate whether a mutation belonged in the Training or Validation sets, the Sample ID, the Cancer Type, and basic mutation annotations. The ParsSNP column represents scores generated by the ParsSNP model for the validation sets, and ParsSNP labels (from the learning phase) for the training mutations. PanCan does NOT include mutations found in hypermutators (see Pan_Cancer_Hypermuators.Rdata, below). 
	2) ParsSNP is a neural network object (from the nnet package). It is the final model used in the study, and produces all ParsSNP scores. 
	3) b62 is the blossum62 matrix from NCBI (http://www.ncbi.nlm.nih.gov/Class/FieldGuide/BLOSUM62.txt). It is used for the blossum62 descriptor.
	4) FIS.imp contains the values for 16 previous functional impact scores that apply to mutations that are truncating/structural (inframe indels, frameshift indels, nonstop or premature stop mutations) and noncoding/silent (RNA-only mutations, intronic, synonymous). See the methods for details.
	5) gene.anno contains the gene-level descriptors Protein Length, Truncation Rate, Unaffected Residues and Cancer Type Distribution. These were calculated based on the training set of mutations (see methods). They are applied to new data as annotations. 
	6) scaling contains the values needed to transform descriptors into [0,1] so the neural network can be applied. 
	7) missing contains the mean values for the descriptors (based on the training set), which are used to replace any remaining missing values. 


2) ParsSNP_learning.r
	
	This script demonstrates the learning phase of ParsSNP. It requires an up-to-date R installation, as well as the poibin, foreach, doParallel, nnet and e1071 packages. Install R from https://www.r-project.org/, and then install the libraries from within R by running:
	
	>install.packages(c("poibin", "foreach", "doParallel", "nnet", "e1071"))
	
	There are three functions in the script:
	
	1) expect()
		This performs the E-step of the learning process. It applies Bayes' law to current labels, updating them based on the range of pathogenic mutations believed to exist in the case. 
	2) maximize()
		This performs the M-step of the learning process. It trains a neural net in cross validation, and updates the labels accordingly. 
	3) EM()
		This is a wrapper function, which structures the EM algorithm. It initializes the labels randomly, then calls expect() and maximize() iteratively. It also invokes the stop criteria to end the process. 
		
	The script will load data from ParsSNP_resources.Rdata, and run the learning procedure. It will ultimately produce a new model that will reproduce the original ParsSNP model, producing a plot to show it. 
	
	This script is NOT meant to be used as a command line tool. Rather, it demonstrates how the learning process occurs. To use this code, enter the R workspace and run lines by copy-and-paste to see the procedure. Alternatively, use 'source("ParsSNP_learning.r")' from within R to run the script in full. 
	
3) ParsSNP_application.r
4) kakiuchi_nature_genetics.txt
5) kakiuchi_nature_genetics.hg19_multianno.txt

	ParsSNP_application.r will apply the ParsSNP model in ParsSNP_resources.Rdata to new data. The following steps are required:
	
	1) Data must first be annotated using Annovar. It can be downloaded from http://annovar.openbioinformatics.org/. The authors have an excellent guide	to setting up the software. Two libraries are necessary: the RefGene libraries for gene annotations, and ljb26_all for impact scores. After downloading 	and decompressing the software, the following commands must be run:
		
		To install the RefGene and ljb26_all libraries:
		
		$perl annotate_variation.pl -buildver hg19 -downdb -webfrom annovar refGene humandb/
		$perl annotate_variation.pl -buildver hg19 -downdb -webfrom annovar ljb26_all humandb/
		
		To annotate the input file:
		
		$perl table_annovar.pl [input-file] humandb/ -buildver hg19 -out [output-tag] -remove -protocol refGene,ljb26_all -operation g,f -nastring NA
		
		where input-file is formatted the same as kakiuchi_nature_genetics.txt, with 5 columns including chromosome, start position, end position, reference allele, and variant allele (the Sample_ID column is optional). 
		
	2) Annovar will produce a file that is formatted the same as kakiuchi_nature_genetics.hg19_multianno.txt. The following command should be run:
	
		$Rscript ParsSNP_application.r [input-file]
		
		This will produce a file, ParsSNP.output.[input-file], which contains the ParsSNP scores for each provided mutation. 
		
	ParsSNP_application.r will filter the data to only exonic mutations, and perform the necessary annotation, scaling and imputation on the descriptors. 
	
	The script requires an up-to-date R installation, as well as the nnet package. Install R from https://www.r-project.org/, and then install nnet from within R by running:
	
	>install.packages("nnet")
	
6) Pan_Cancer_Hypermutators.Rdata 

	This workspace contains the object Hypermutators. This is a dataframe that encompasses the hypermutator set that was set aside at the outset of the study. It is formatted identically to PanCan, the dataframe that covers training and validation sets in the ParsSNP_resources.Rdata workspace.
	
